@page "/group/{CustomerId:int}/{GroupId:int}"
@layout CustomLOut
@inject IGetGroupWithProductsByCustomerIdAndGroupIdUC _IGetGroupWithProductsByCustomerIdAndGroupIdUC
@inject IGetAllProductFromDbAsyncUC _IGetAllProductFromDbAsyncUC
@using System.Linq
@using MLicensemanager.BlazorUI.HttpServices;
@using MLicensemanager.BlazorUI.Models;
@using MLicensemanager.BusinessCore.Helpers;
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@inject IWebApiExecuter _IWebApiExecuter

<PageTitle>Group Details</PageTitle>

<p>Customer Id:@CustomerId</p>
<p>Group Id:@GroupId</p>
<!-- Form to Change Group Name -->
<div class="row m-4">

    <div class="">
        <EditForm Model="@group" OnValidSubmit="ChangeGroupName" class="d-flex justify-content-evenly  align-content-center align-baseline">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="newGroupName" class="form-label">New Group Name</label>
                <InputText id="newGroupName" class="form-control" @bind-Value="group.GroupName" />
                <ValidationMessage For="@(() => group.GroupName)" />
            </div>
            <div class="mb-3">
                <label class="form-label">EAN</label>
                <input type="text" @bind="@group.EAN" disabled class="form-control" />
            </div>
            <div class="d-flex align-items-center mt-3">
                <button type="submit" class="btn btn-outline-success "><i class="fas fa-save"></i></button>
                <button type="submit" class="btn btn-outline-danger "><i class="fas fa-trash"></i></button>
            </div>
        </EditForm>
    </div>

</div>

@if (customerProductsDto != null)
{
    <!-- Customer Product -->
    <div class="card d-flex justify-content-between mb-2">
        <table class="table table-borderless align-baseline">

            <thead>
                <tr>
                    <th hidden>Product ID</th>
                    <th>Product Name</th>
                    <th>Remaining</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in customerProductsDto)
                {
                    <tr>
                        <td hidden>@product.ProductId</td>
                        <td>@product.ProductName</td>
                        <td class="fw-bolder text-dark text-center">@product.Quantity</td>
                        <td class="text-center">@product.Price</td>
                        <td class="text-center">
                            <input type="number"
                           @key="product.ProductId"
                                   min="0"
                           @bind-value="product.Quantity"
                           @bind-value:event="oninput"
                                   class="rounded-pill text-center align-baseline fw-bold text-success p-2" style="max-width:500px; border-color:darkblue;" />
                        </td>
                        <td class="text-center">
                            <button class="btn btn-outline-danger" @onclick="()=> RemoveProductFromCustomer(product)">
                                <i class="fas fa-minus-circle"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>

        </table>
        <div class="table-borderless text-end m-2 p-1 align-baseline">
            Total
            <span class="text-primary fw-bold">
                @*@customerProductsDto.Sum(cp => cp.Price * cp.Quantity).ToString("c2")*@
                @customerProductsDto.Sum(cp=>cp.SubTotal).ToString("c");
            </span>
            /
            <span class="text-secondary">
                (@customerProductsDto.Sum(p=>p.Quantity)) lisense
            </span>
        </div>
    </div>
    <!-- Database Product -->
    <div class="card d-flex justify-content-between mb-2">
        <table class="table table-borderless align-baseline ">

            <thead>
                <tr>
                    <th hidden>Product ID</th>
                    <th>Product Name</th>
                    <th>Remaining</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in comparedProductsDto)
                {
                    <tr>
                        <td hidden>@product.ProductId</td>
                        <td>@product.ProductName</td>
                        <td class="fw-bolder text-dark text-center">@product.Remaining</td>
                        <td class="text-center">@product.Price</td>
                        <td class="text-center">
                            <input type="number"
                           @key="product.ProductId"
                                   min="0"
                           @bind-value="product.Remaining"
                           @bind-value:event="oninput"
                                   class="rounded-pill text-center align-baseline fw-bold text-success p-2" style="max-width:500px; border-color:darkblue;" />
                        </td>
                        <td class="text-center">
                            <button class="btn btn-outline-success" @onclick="()=> AddProductToCustomer(product)">
                                <i class="fas fa-plus-circle"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <!-- Save Print Undo -->
    <div class="table-borderless text-end m-2 p-1 align-baseline">
        <button class="btn btn-outline-secondary"><i class="fas fa-undo "></i></button>
        <button class="btn btn-outline-success"><i class="fas fa-save "></i></button>
        <button class="btn btn-outline-primary"
            @onclick="ShowPrintPreview">
            @if (showPrintPreview == true)
            {
                <i class="fas fa-eye"></i>
            }
            else
            {
                <i class="fas fa-eye-slash"></i>
            }

        </button>
    </div>
    <!-- Purchase Order-->
    @if (showPrintPreview)
    {
        <div class="card d-flex justify-content-between mb-2">
            <div class="card-header">Print Preview - Customer Products</div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-bordered print-preview-table">
                        <thead>
                            <tr>
                                <th>Product Name</th>
                                <th>Price</th>
                                <th>Quantity</th>
                                <th>Subtotal</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in customerProductsDto)
                            {
                                <tr>
                                    <td>@product.ProductName</td>
                                    <td>@product.Price.ToString("c2")</td>
                                    <td>@product.Quantity</td>
                                    <td>@((product.Price * product.Quantity).ToString("c2"))</td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="3" class="print-preview-total">Total:</td>
                                <td>@customerProductsDto.Sum(p=>p.Price * p.Quantity).ToString("c2")</td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
    }

}

@code {

    [Parameter]
    public int GroupId { get; set; } //comming from outside (Parrent)
    [Parameter]
    public int CustomerId { get; set; }//comming from outside (Parrent)

    private Group group = new Group();

    private List<CustomerProductDto> customerProductsDto { get; set; } = new List<CustomerProductDto>();
    private List<ProductFromDbDto> productFromDbDto { get; set; } = new List<ProductFromDbDto>();
    private List<CompareProductDto> comparedProductsDto { get; set; } = new List<CompareProductDto>();

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        if (CustomerId > 0)
        {
            //Get Groups from Db
            group = await _IGetGroupWithProductsByCustomerIdAndGroupIdUC.ExecuteAsync(CustomerId, GroupId);
            if (group != null)
            {
                //Each Group Contains a list of Products
                customerProductsDto = group.GroupProducts.Select(groupProduct => new CustomerProductDto
                    {
                        ProductId = groupProduct.Product.ProductId,
                        ProductName = groupProduct.Product.ProductName,
                        Price = groupProduct.Product.Price,
                        Quantity = groupProduct.Quantity,
                        SubTotal = groupProduct.Quantity * groupProduct.Product.Price
                    }).ToList();
            }

            var productFromDb = await _IGetAllProductFromDbAsyncUC.ExecuteAsync();
            if (productFromDb != null)
            {
                productFromDbDto = productFromDb.Select(pFromDb => new ProductFromDbDto
                    {
                        ProductId = pFromDb.ProductId,
                        ProductName = pFromDb.ProductName,
                        Remaining = 1,
                        Price = pFromDb.Price
                    })
                .ToList();


            }

            if (productFromDb != null && group != null)
            {
                var comparer = new ProductIdEqualityComparer();
                comparedProductsDto = productFromDb
                    .Except(group.GroupProducts.Select(gp => gp.Product), comparer)
                    .Select(product => new CompareProductDto
                        {
                            ProductId = product.ProductId,
                            ProductName = product.ProductName,
                            Price = product.Price,
                            Remaining = 1 // Default remaining value
                        })
                    .ToList();
            }
        }
    }
    #region Form

    private async Task ChangeGroupName()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirmSaveChanges", "Are you sure you want to change the group name?");

        if (confirmed == true)
        {
            var updatedGroup = await _IWebApiExecuter.InvokeUpdate($"Customer/{group.GroupId}", group.GroupName);

            if (updatedGroup != null)
            {
                // Handle successful update
                await JSRuntime.InvokeVoidAsync("alert", "Group name changed successfully!");
            }
            else
            {
                // Handle error
                await JSRuntime.InvokeVoidAsync("alert", "An error occurred while changing the group name.");
            }
        }
    }

    #endregion
    #region Add Remove
    private void AddProductToCustomer(CompareProductDto product)
    {
        // Find the product in comparedProductsDto
        CompareProductDto comparedProduct = comparedProductsDto.FirstOrDefault(cp => cp.ProductId == product.ProductId);

        if (comparedProduct != null)
        {
            // Add the selected product to the customer's list
            customerProductsDto.Add(new CustomerProductDto
                {
                    GroupId = GroupId,
                    ProductId = comparedProduct.ProductId,
                    ProductName = comparedProduct.ProductName,
                    Price = comparedProduct.Price,
                    Quantity = 1
                });
            comparedProductsDto.Remove(comparedProduct);

            // Recalculate totals
            CalculateTotals();
        }
    }

    private void RemoveProductFromCustomer(CustomerProductDto product)
    {
        // Find the product in customerProductsDto
        CustomerProductDto customerProduct = customerProductsDto.FirstOrDefault(cp => cp.ProductId == product.ProductId);

        if (customerProduct != null)
        {
            // Add the selected product back to comparedProductsDto
            comparedProductsDto.Add(new CompareProductDto
                {
                    ProductId = customerProduct.ProductId,
                    ProductName = customerProduct.ProductName,
                    Price = customerProduct.Price,
                    Remaining = 1 // You can set the remaining value here
                });

            // Remove the product from the customer's list
            customerProductsDto.Remove(customerProduct);

            // Recalculate totals
            CalculateTotals();
        }
    }

    private void UpdateTotals()
    {
        CalculateTotalss();
    }
    private void CalculateTotalss()
    {
        subtotal = customerProductsDto.Sum(cp => cp.Price * cp.Quantity);
        total = subtotal;

        StateHasChanged(); // Trigger a UI update
    }

    #endregion

    #region Helper Method
    private decimal subtotal;
    private decimal total;

    private void CalculateTotals()
    {
        subtotal = customerProductsDto.Sum(cp => cp.Price * cp.Quantity);
        total = subtotal;
    }

    #endregion

    #region Print
    private bool showPrintPreview = false;

    private void ShowPrintPreview()
    {
        showPrintPreview = !showPrintPreview;
    }
    #endregion
}


